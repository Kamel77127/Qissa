<?php

namespace App\Model;

use App\Core\Application;
use App\Core\Model;
use App\Repository\CartRepository;

class CartModel extends CartRepository
{
    public ?int $userId = null;
    public ?array $products = [] ;
    public ?float $subPrice = null;
    public ?float $total = null;


    public function tableName(): string
    {
        return 'cart';
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    public function getProduct(): array
    {
       return $this->products;
    }

    
    public function getProductId(): array
    {
       $body = [];
       foreach ($this->products as $key => $value)
       {
           $body[$key] = $value['productId'];
       }
       return $body;
    }

    public function getProductForPaypal()
    {
        $body = [];

        if($products = Application::$app->session->getSessionCart()) {

            foreach ($products as $keys => $values) {
                $body[] = $values;
            }

        }

        return $body;
    }

    public function setTotal()
    {
        $products = $this->findAllWhereUidPaypal(Application::$app->session->get('user'));
        

        foreach($products as $key => $value)
        {
            $this->total = array_sum(array_column($products, 'subPrice'));
        }
       
    }

    public function getTotal()
    {
        return $this->total;
    }

    public function labels()
    {
        return [

        ];
    }

    public function removeFromArray(string $productName)
    {
        unset($this->products[$productName]);
    }

    public function rules(): array
    {
        return [
            'productId' => [self::RULE_REQUIRED],

        ];
    }


    public function setUserId()
    {
        $this->userId = Application::$app->session->get('user');
    }
    public function setProducts()
    {
        return $this->products = Application::$app->session->getSessionCart();
    }


    public function calculateSubPrice()
    {
        foreach($this->products as $key => $value)
        {
            $this->subPrice = $value['price'] * $value['quantity'];
            array_push($this->products[$key],$this->subPrice);
        }
    }

    public function getSubPrice(int $pid)
    {
        foreach ($this->products as $key => $value)
        {
            if($this->products[$key]['productId'] === $pid)
            {
                return $this->products[$key]['0'];
            }
        }
    }

    public function save()
    {
        return parent::save(); // TODO: Change the autogenerated stub
    }

    public function cartExist(int $uid, array $productId = null)
    {
       return parent::cartExist($uid, $productId);
    }

    public function updateQuantity(int $uid)
    {
        return parent::updateQuantity($uid);
    }

    public function deleteRows(array $pid, int $uid)
    {
        parent::deleteRows($pid, $uid); // TODO: Change the autogenerated stub
    }

    public function removeFromCart(int $uid, int $pid)
    {
        return parent::removeFromCart($uid, $pid); // TODO: Change the autogenerated stub
    }

    public function findAllWhereUid(int $uid)
    {
        return parent::findAllWhereUid($uid); // TODO: Change the autogenerated stub
    }

    public function selectRandomProduct()
    {
        return parent::selectRandomProduct(); // TODO: Change the autogenerated stub
    }

    public function UpdateQuantityById($uid , $pid , $pQuantity , $subPrice)
    {
        return parent::updateQuantityById($uid , $pid , $pQuantity , $subPrice);
    }

    public function findOrders()
    {
        return parent::findOrders();
    }

    public function deleteCart($uid)
    {
        return parent::deleteCart($uid); // TODO: Change the autogenerated stub
    }
}